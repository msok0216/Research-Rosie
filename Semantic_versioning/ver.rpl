-- -*- Mode: rpl; -*-                                                                                   
--
-- ver.rpl    Patterns for matching version numbers
--
-- Â© Copyright Jamie A. Jennings 2019.
-- LICENSE: MIT License (https://opensource.org/licenses/mit-license.html)
-- AUTHOR: Jamie A. Jennings

-- FUTURE:
--
-- Write a pattern that ignores a leading "=" or "v" character.
-- Write a pattern that recognizes a semver range like ">=1.0.0", "~0.4.2"
--   but only if these are standardized somewhere, or are de facto standard.

-- Citation:
-- https://semver.org/
-- https://devhints.io/semver

package verTest

-- Semantic Versioning (semver) parsing

-- For a regex, see e.g. https://github.com/semver/semver/issues/232#issuecomment-405596809, where
-- among others, this regex is proposed:
-- ^(?<major>0|[1-9]\d*)\.(?<minor>0|[1-9]\d*)\.(?<patch>0|[1-9]\d*)(?:-(?<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$

local alias numeric = [0] / { [1-9] [:digit:]* }

local anyVersion = "*"
local subversion = ci:"x"
local equal = "="
local greaterThan = ">"
local lessThan = "<"
local reasonablyCloseTo = "~"
local compatibleWith = "^"
local greaterOrEqual = greaterThan equal
local lessOrEqual = lessThan equal
local rangeChar = "-"
local orOperator = "||"

local alias prerelease_chunk = numeric / { [:digit:]* [[:alpha:][\-]] [[:alnum:][\-]]* }
local alias metadata_chunk = [[:alnum:][\-]]+

major = numeric 
minor = numeric 
patch = numeric 

prerelease = { prerelease_chunk {"." prerelease_chunk}* }
buildmetadata = { metadata_chunk {"." metadata_chunk}* }

semver = { major "." minor "." patch {"-" prerelease}? {"+" buildmetadata}? }

test = {greaterOrEqual semver}

-- matches patterns that represent any subversions such as "1.2.x" and "1.x"
anySubversion = {(major "." minor "." subversion) / (major "." subversion "." subversion) / (major "." subversion) / (major "." anyVersion)}

-- matches patterns that represent versioning ranges, including "1.2.3 - 2.4.5" and ">= 1.2 < 4"
range = {major ("." minor)? ("." patch)? [ ]* rangeChar [ ]* major ("." minor)? ("." patch)?} / 
            {(greaterOrEqual / greaterThan) [ ]* major ("." minor)? ("." patch)? [ ]* (lessOrEqual / lessThan) [ ]* major ("." minor)? ("." patch)?}

-- matches patterns that represent or such as "1.2.3 || 3.5.4"
or = {(semver / anySubversion) [ ]* orOperator [ ]* (semver / anySubversion)}

-- "range" and "or" have to come before regular semantic versioning constrains otherwise regular semver will match "or" and "range" pattern first and return false
constrain = range / or / anySubversion / { (greaterOrEqual / equal / greaterThan / lessThan / reasonablyCloseTo / compatibleWith)? (major) ("." minor)? ("." patch)? {"-" prerelease}? {"+" buildmetadata}? } / 
                anyVersion / subversion / major 


-- test constrain accepts "1.*"
-- test constrain accepts "1.x"
-- test constrain accepts ">=1.2.3"
-- test constrain accepts "1"
-- test constrain accepts "1.2.3 - 2.3.0"
-- test constrain accepts "1.2.3 - 2.3"
-- test constrain accepts "1.2.3 - 2"
-- test constrain accepts "1.2 - 2.3.0"
-- test constrain accepts ">=0.14 <16"
-- test constrain accepts "0.14.x || 15.x.x"
-- test constrain accepts "1.2.3 || 2.4.5"
-- test constrain accepts "1.x.x"
-- test constrain accepts "^0.1.2"
-- test constrain accepts "=1.2.3"
-- test constrain accepts "<1.2.3"
-- test constrain accepts "~1.2.3"
-- test constrain accepts ">1.2.3"
-- test constrain accepts "^1"
-- test constrain accepts "*"
-- test constrain accepts "X"


-- test semver accepts "1.2.3-alpha.7.8.9+x.y-foo.z-bar-baz"
-- test semver includes major "0.0.0", "0.1.2", "1.9.0", "1.10.0"
-- test semver includes minor "0.0.0", "0.1.2", "1.9.0", "1.10.0"
-- test semver includes patch "0.0.0", "0.1.2", "1.9.0", "1.10.0"
-- test semver excludes prerelease "0.0.0", "0.1.2", "1.9.0", "1.10.0"
-- test semver excludes buildmetadata "0.0.0", "0.1.2", "1.9.0", "1.10.0"

-- test semver rejects "0", "0.1", "1.0", "v1.0.0", "1.1.x", " 1.0.0", "1.01.1", "1.2.3b"

-- test semver includes prerelease "0.0.0-1", "0.0.0-0.0.0.0.0.0.0.0", "0.0.0-alpha"
-- test semver includes prerelease "0.0.0-x.1", "0.0.0-x.2.foo", "0.0.0-x.2.a.a.a.a.a"

-- test semver rejects "0.0.0-alpha."

-- test semver includes buildmetadata "0.0.0-1+1", "0.0.0-0+x", "0.0.0-alpha+x.y.z"
-- test semver includes buildmetadata "0.0.0-alpha.3.2.1+x.y.z"

-- test semver rejects "0.0.0-alpha+", "0.0.0-alpha+1.", "0.0.0-", "0.0.0-+"

